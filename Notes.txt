<FUNDAMENTALS AND FS MODULE: NODE JS>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
JS- multipurpose programming language

Intially javacript only used for Dom manipulation
was unable to run outside the browser

in 2009- ryan dahl
NodeJs - Javascript Runtime
-V8 engine used to run javacript
int creates runtime environment for Javascript to run on pc
It can access: OS,files,Network

# It can be used for:
Machine Learning
API development/server-side apps
game development

functions -> modules -> Package/library
ex.. fs module-> file system- read and write files

===================================
# File Handling:
ReadFileSync
ReadFile

writefileSync
writeFile
appendFile

to delete file:
fs.unlinkSync(parameter);

===============================================================
<API DEVELOPMENT FUNDAMENTALS AND HTTP MODULE>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

API- Application Programming Interface
-Any programme that takes input doing some functionality and gives output.
-collection of defferent functionality

front-end(II/GUI/Design)  --  >  API server    -->         backend(database)
(html,css,js)            (java,js,python,php)  (mongodb,SQL)

Server :: can be computer or programme that continously running and job is to provide services (respond) when client asks (request).
-----------------------------------
            Request                |
            ------->               |
Front-end              Back-end    |
 (client)             (API server) |
           <-------                |
           Response                | 
------------------------------------

# components of request:
1] Base Address / IP Address  128.98.8.1 of server
2] Routes / Paths (functionality)   
     Ip Address + route   (URL) Uniform Resourse Locater
     ex.. 128.98.8.1/about?id=1
     ?id=1 => url parameter/variable/query
              - Way of sending data through url

3] CRUD operations (create,Read,update,delete) 
4] Method [GET,POST,PUT,PATCH,DELETE,OPTIONS] api end-points
5] Data through request body
6] Headers (way of sending extra information from client to server)

# Components of response:
1] Data  (Response)
2] Headers
3] Status code :A number applied to every different kind response that occures.
 Response successfull  - 200
 server unable to find - 404


127.0.0.1/ lcoacalhost : local server that is running on any computer
-IP Address  of local server is fixed
- We cant remember Ip address of any server that's why they have domain name ex.. www.google.com

Port numbers:
============
Every server has different port number
to identify whether it is application or database server etc.

# HTTP Module:
==============
-Used to create our own custom server
-Postman -> it is an platform for developers builing and using API.
-Thunder client -> vs code extension
     -alternate to postman

===============================================================================

# UNDERSTANDING GET AND POST IN HTTP MODULE:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        END POINTS:                               USE
+ A user can fetch all data -> GET /products Method used
+ Fetch single  data fetch -> GET/ products?id=1;                     
+ create a new product by sending data through request  -> POST /products  |data in request body

+To delete product based on id -> DELETE /products?id=2;

+ To update the product based on id -> PUT  /products?id=3   |data in request body

npm i -g nodemon   -> Tool used to run project       
                      Just like a Bot
-Automatically reruns the project after saving (-g globally)

We are using url module to parse the string.
- After '?' all are parameter

convert json string to array of object:
JSON.parse(product);

convert array of object to json string:
JSON.stringify(product);

Response should be string only.

In POST method a huge amount of data is send by request but this data will be send chunk by chunk.

-usen JSON body to send data in Thunder Client
-Takes more time to send data as request

# Testing client-> Thunder API ,Browser,Postman etc.
-they have direct access to any local as well as global API server
-They have same orihin


fronted-server/app -> fetch in html file
-can not directly access the api server due to security
-they are two differ origin

# CORS Policy-> Access-Control-Allow-Origin
This header indicates wheteher the response can be shared with requesting code from the given origin.

-this header should include on api server it allows access two differ origin.

================================================================
Working With MongoDB and Project Structuring:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
connecting javascript programme to mongodb server database:

front-end server        API server  Realtime-Database
1] node js -> database(MongoDB)

Node js -> mongoose -> Mongo Driver -> MongoDB

mongoose -> javascript Package
gives us functions help to connect mongodb server to and perform CRUD opearations with database.

-help to convert json to javacript object
-(ODM) object data modeling tool
-functions to perform all queries

-Before any prject npm init makeprofessionl structure of your project
-that contains info about your project

package.json:
{
  "name": "dbwork",
  "version": "1.0.0",
  "description": "database connection project",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Akshata Manale",
  "license": "ISC"
}

To install mongoose:
-npm i mongoose

-Mongoose is an ODM (Object database Modelling) library for Node.js that defines objects with a schema mapped to a MongoDB document. 

-A Mongoose Schema defines the structure and property of the document in the MongoDB collection. This Schema is a way to define expected properties and values along with the constraints and indexes.

mongoose dependency will be added to your project
-Whenever we are sharing our project with someone do not send node modules files just send package.json and package-lock.json , they will install npm theier own.
-It will be bulky to send

npm i command checks package-lock.json and install all the dependecy in their project.

Model: connection between programme and collections

When facing problem:
MongooseError: Operation `users.insertOne()` buffering timed out after 10000ms
->  replace localhost to 127.0.0.1

Validate schema:



EXPRESS JS API DEVELOPMENT:
^^^^^^^^^^^^^^^^^^^^^^^^^^
library or module build using javascript
Easy to create API
-Internally uses http module
