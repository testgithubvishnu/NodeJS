<FUNDAMENTALS AND FS MODULE: NODE JS>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
JS- multipurpose programming language

Intially javacript only used for Dom manipulation
was unable to run outside the browser

in 2009- ryan dahl
NodeJs - Javascript Runtime
-V8 engine used to run javacript
int creates runtime environment for Javascript to run on pc
It can access: OS,files,Network

# It can be used for:
Machine Learning
API development/server-side apps
game development

functions -> modules -> Package/library
ex.. fs module-> file system- read and write files

===================================
# File Handling:
ReadFileSync
ReadFile

writefileSync
writeFile
appendFile

to delete file:
fs.unlinkSync(parameter);

===============================================================================================================================================
<API DEVELOPMENT FUNDAMENTALS AND HTTP MODULE>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

API- Application Programming Interface
-Any programme that takes input doing some functionality and gives output.
-collection of defferent functionality

front-end(II/GUI/Design)  --  >  API server    -->         backend(database)
(html,css,js)               (java,js,python,php)          (mongodb,SQL)

Server :: can be computer or programme that continously running and job is to provide services (respond) when client asks (request).
-----------------------------------
            Request                |
            ------->               |
Front-end              Back-end    |
 (client)             (API server) |
           <-------                |
           Response                | 
------------------------------------

# components of request:
1] Base Address / IP Address  128.98.8.1 of server
2] Routes / Paths (functionality)   
     Ip Address + route   (URL) Uniform Resourse Locater
     ex.. 128.98.8.1/about?id=1
     ?id=1 => url parameter/variable/query
              - Way of sending data through url

3] CRUD operations (create,Read,update,delete) 
4] Method [GET,POST,PUT,PATCH,DELETE,OPTIONS] api end-points
5] Data through request body
6] Headers (way of sending extra information from client to server)

# Components of response:
1] Data  (Response)
2] Headers
3] Status code :A number applied to every different kind response that occures.
 Response successfull  - 200
 server unable to find - 404


127.0.0.1/ lcoacalhost : local server that is running on any computer
-IP Address  of local server is fixed
- We cant remember Ip address of any server that's why they have domain name ex.. www.google.com

Port numbers:
============
Every server has different port number
to identify whether it is application or database server etc.

# HTTP Module:
==============
-Used to create our own custom server
-Postman -> it is an platform for developers builing and using API.
-Thunder client -> vs code extension
     -alternate to postman

==================================================================================================================================================

# UNDERSTANDING GET AND POST IN HTTP MODULE:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        END POINTS:                               USE
+ A user can fetch all data -> GET /products Method used
+ Fetch single  data fetch -> GET/ products?id=1;                     
+ create a new product by sending data through request  -> POST /products  |data in request body

+To delete product based on id -> DELETE /products?id=2;

+ To update the product based on id -> PUT  /products?id=3   |data in request body

npm i -g nodemon   -> Tool used to run project       
                      Just like a Bot

-Automatically reruns the project after saving (-g globally)

We are using url module to parse the string.
- After '?' all are parameter

convert json string to array of object:
JSON.parse(product);

convert array of object to json string:
JSON.stringify(product);

Response should be string only.

In POST method a huge amount of data is send by request but this data will be send chunk by chunk.

-usen JSON body to send data in Thunder Client
-Takes more time to send data as request

# Testing client-> Thunder API ,Browser,Postman etc.
-they have direct access to any local as well as global API server
-They have same origin


fronted-server/app -> fetch in html file
-can not directly access the api server due to security
-they are two differ origin

# CORS Policy-> Access-Control-Allow-Origin
This header indicates wheteher the response can be shared with requesting code from the given origin.

-this header should include on api server it allows access two differ origin.

================================================================================================================================================
Working With MongoDB and Project Structuring:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
connecting javascript programme to mongodb server database:

front-end server        API server  Realtime-Database
1] node js -> database(MongoDB)

Node js -> mongoose -> Mongo Driver -> MongoDB

mongoose -> javascript Package
gives us functions help to connect mongodb server to and perform CRUD opearations with database.

-help to convert json to javacript object
-(ODM) object data modeling tool
-functions to perform all queries

-Before any project npm init make professionl structure of your project
-that contains info about your project

package.json:
{
  "name": "dbwork",
  "version": "1.0.0",
  "description": "database connection project",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Akshata Manale",
  "license": "ISC"
}
Start project:
npm init

To install mongoose:
-npm i mongoose

-Mongoose is an ODM (Object database Modelling) library for Node.js that defines objects with a schema mapped to a MongoDB document. 

-A Mongoose Schema defines the structure and property of the document in the MongoDB collection. This Schema is a way to define expected properties and values along with the constraints and indexes.

mongoose dependency will be added to your project

IMPORTANT:
==========
-Whenever we are sharing our project with someone do not send node modules files just send package.json and package-lock.json , they will install npm theier own.
-It will be bulky to send

npm i command checks package-lock.json and install all the dependecy in their project.

Model: connection between programme and collections

When facing problem:
MongooseError: Operation `users.insertOne()` buffering timed out after 10000ms
->  replace localhost to 127.0.0.1

Validate schema:

====================================================================================================================================================

EXPRESS JS API DEVELOPMENT:
^^^^^^^^^^^^^^^^^^^^^^^^^^
library or module build using javascript
Easy to create API
-Internally uses http module

send() -> automatically converts js object to json object

Front-end server/testing client   -> middleware   -> backend-server


# MiddleWare:
============

-stops request from going to end point

-It is a function exist  between after actually request comes and before reaches to the end point.

-To check request,check data,format data,security check ,check for harmful thing,error handling etc.

Example..
function middleware(req, res, next) {
  if (req.params.id < 10) {
    res.send({ message: "You are blocked" });
  } else {
    next();
  }
}

# if  you are sure that you want to use middleware for each and every end-point then rather than 
mentioning in each endpoint use it at above.

app.use(middleware_name);

-Maximum length of URL in Browser's address bar: 2038 characters 

# post method:
we use middleware function:
app.use(express.json());

- when request comes it fisrt come to middleware then it goes int post method.
-this middleware access the request 
-extract the data and format it.
-take it chunk by chunk and convert into javascript object,finally create body


- creating project:
1.npm init
2.npm i mongoose
3.npm i

==============================================================================================================================================================

AUTHENTICATING USING JWT TOKEN:NODE JS
======================================
JWT - javascript web token
How to make your apis secure?
To secure apis from unauthorized access we use JWT
To make api public/private or specific to some user

# Authentication:
Letting someone who you are
Check if a user Valid

1] Register to API
2] Access the end-points

Encryption:bycryptjs used to encrypt password:

#Hashing" a password refers to taking a plain text password and putting it through a hash algorithm. 
The hash algorithm takes in a string of any size and outputs a fixed-length string.

 hash algorithms always produce the same result for a specific password, they are predictable. 
If you only hash the password, a hacker can figure out the original password. Hashing is not enough.

# Bcrypt uses the Blowfish cypher:
Random bytes get added to the password, and together the salted hash meets security recommendations on length and unpredictability.

#Salting a password
A salt is a random string. By hashing a plain text password plus a salt, the hash algorithm’s output is no longer predictable. 
The same password will no longer yield the same hash. The salt gets automatically included with the hash, so you do not need to store it in a database.

Password
Salt
Callback of error and the returned hash

bcrypt.genSalt(saltRounds, function(err, salt) {
  bcrypt.hash(password, salt, function(err, hash) {
  // returns hash
  console.log(hash);
  });
});

# Compare passwords:
We pass bcrypt.compare() these parameters:

The password we are comparing
The hash that is stored in the database
Callback of error and the result: If the password matches the hash, the result equals true. If it is not a match, the result equals false.

bcrypt.compare(password, hash, function(err, result) {
  // returns result
});

Hashing vs encryption:
ecncryption is scrambling plaintext into unredable ciphertext , which you can decrypt with key.
While hasing turns plain text into a unique code,which can't be reverted into readable form.

1]Monolethic architecture:-Single server for frontend and backend 

2]Microservices architecture:-Different servers for frontend and backend 
-Same backend for multiple frontend and vice-verca
for ex.. facebook  can be opened in instagram application and vice-verca

Google backend for facebook frontend and instagram fronted can use google backend

-Only thing is allow others to use your API

There are multiple front-ends that send request to server
After sending request connection get closes
to remember which frontend has send request
That's why we need JWT Token for later access

when someon
- login and having correct credential then not only send response but also uniquely generated JWT token
and that to frontend service.

- Next time for any request send that token and for any access check that token before end-point .

We use middleware to check token before reaching
 to the end-point.

 jwt creates:
 1] Header - info about token
 2] Pre-load - data of token
 3] Secret-Key -Any string

In its compact form, JSON Web Tokens consist of three parts separated by dots (.), which are:

A JWT contains three parts:

1] Header: Consists of two parts:
The signing algorithm that’s being used.
The type of token, which, in this case, is mostly “JWT”.

2] Payload: The payload contains the claims or the JSON object.

3] Signature: A string that is generated via a cryptographic algorithm that can be used to verify the integrity of the JSON payload.


 # Whenever the user wants to access a protected route or resource, the user agent should send the JWT,
 typically in the Authorization header using the Bearer schema. The content of the header should look like the following:

Authorization: Bearer <token>

 we need jsonwebtoken package to create token into the header of request we passing token
      type               value
 Authentication    Bearer Token

============================================
// npm (Node Package Manager):
sematic versioning:
"express":^4.18.1

x: first digit is major version
y: second digit is minor version
z: third digit is patch version
^: means changes th minor or patch version
~: means changes patch version only

npm uninstall package_name
npm list

